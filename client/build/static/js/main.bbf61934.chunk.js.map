{"version":3,"sources":["favicon.ico","logo.svg","components/MenuItemBox.js","components/SwiperContainer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","MenuItemBox","text","selected","className","SwiperContainer","list","map","el","name","key","beatList","topList","App","props","state","selectedBeat","selectedTop","alignCenter","clickWhenDrag","dragging","hideArrows","hideSingleArrow","itemsCount","length","scrollToSelected","translate","transition","wheel","onSelect","setState","menuItems","beatMenuItems","topMenuItems","this","menu","src","logo","alt","icon","data","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mFAAAA,EAAOC,QAAU,IAA0B,qC,oBCA3CD,EAAOC,QAAU,IAA0B,kC,mQCW5BC,G,YARM,SAAC,GAAsB,IAArBC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,SACzB,OACI,yBAAKC,UAAS,wBAAmBD,EAAW,SAAW,KAClDD,EACD,sCCGGG,EANS,SAACC,EAAMH,GAC7BG,EAAKC,KAAI,SAAAC,GAAO,IACPC,EAAQD,EAARC,KACP,OAAO,kBAAC,EAAD,CAAaP,KAAMO,EAAMC,IAAKD,EAAMN,SAAUA,Q,gBCCnDQ,EAAW,CACf,CAAEF,KAAM,UACR,CAAEA,KAAM,UACR,CAAEA,KAAM,UACR,CAAEA,KAAM,UACR,CAAEA,KAAM,UACR,CAAEA,KAAM,UACR,CAAEA,KAAM,UACR,CAAEA,KAAM,UACR,CAAEA,KAAM,WAEJG,EAAU,CACd,CAAEH,KAAM,SACR,CAAEA,KAAM,SACR,CAAEA,KAAM,SACR,CAAEA,KAAM,SACR,CAAEA,KAAM,UA2EKI,E,kDA5Db,WAAYC,GAAQ,IAAD,EAZSX,EAYT,4BACjB,cAAMW,IAORC,MAAQ,CACNC,aAdiB,SAejBC,YAdgB,QAehBd,SAda,QAebe,aAAa,EACbC,eAAe,EACfC,UAAU,EACVC,YAAY,EACZC,iBAAiB,EACjBC,WAAYZ,EAASa,OACrBC,kBAAkB,EAClBC,UAAW,EACXC,WAAY,GACZC,OAAO,GArBU,EAwBnBC,SAAW,SAAAnB,GACT,EAAKoB,SAAS,CAAC3B,SAAUO,KAtBzB,EAAKqB,WAfqB5B,EASb,QAMSS,EAdhBL,KAAI,SAAAC,GAAO,IACVC,EAAQD,EAARC,KACP,OAAO,kBAAC,EAAD,CAAaP,KAAMO,EAAMC,IAAKD,EAAMN,SAAUA,QAarD,EAAK6B,cAAgB3B,EAAgBM,EATpB,UAUjB,EAAKsB,aAAe5B,EAAgBO,EATpB,SAIC,E,qDA4BT,IACAT,EAAa+B,KAAKnB,MAAlBZ,SAEF6B,EAAgBE,KAAKF,cAErBG,GADeD,KAAKD,aACbC,KAAKH,WAElB,OACE,yBAAK3B,UAAU,sBACb,8CACA,yBAAKgC,IAAKC,IAAMjC,UAAU,WAAWkC,IAAI,SAEzC,2BAAIC,KACJ,4CACA,kBAAC,IAAD,CACEC,KAAMR,EACN7B,SAAUA,EACV0B,SAAUK,KAAKL,WAGjB,2BAAIU,KACJ,mDACA,kBAAC,IAAD,CACEC,KAAML,EACNhC,SAAUA,EACV0B,SAAUK,KAAKL,gB,GAtDPY,aC1BEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.bbf61934.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/favicon.6e1267d9.ico\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport './MenuItemBox.css'\r\n\r\nconst MenuItemBox  = ({text, selected}) => {\r\n    return(\r\n        <div className={`menu-item-box ${selected ? 'active' : ''}`}>\r\n            {text}\r\n            <p>Hola</p>\r\n        </div>\r\n    )\r\n}\r\nexport default MenuItemBox;","import React from 'react';\r\nimport './SwiperContainer.css'\r\nimport MenuItemBox from './MenuItemBox.js'\r\n\r\nconst SwiperContainer = (list, selected) => {\r\n  list.map(el => {\r\n    const {name} = el;\r\n    return <MenuItemBox text={name} key={name} selected={selected} />\r\n  });\r\n}\r\nexport default SwiperContainer;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport ScrollMenu from 'react-horizontal-scrolling-menu';\nimport SwiperContainer from './components/SwiperContainer.js'\nimport MenuItemBox from './components/MenuItemBox';\nimport icon from './favicon.ico'\n\nconst beatList = [\n  { name: 'Beat 1' },\n  { name: 'Beat 2' },\n  { name: 'Beat 3' },\n  { name: 'Beat 4' },\n  { name: 'Beat 5' },\n  { name: 'Beat 6' },\n  { name: 'Beat 7' },\n  { name: 'Beat 8' },\n  { name: 'Beat 9' }\n];\nconst topList = [\n  { name: 'Top 1' },\n  { name: 'Top 2' },\n  { name: 'Top 3' },\n  { name: 'Top 4' },\n  { name: 'Top 5' }\n];\n\nexport const Menu = (topList, selected) =>\n  topList.map(el => {\n    const {name} = el;\n    return <MenuItemBox text={name} key={name} selected={selected} />;\n  });\n\n\nconst selectedBeat = 'Beat 2';\nconst selectedTop = 'Top 1';\nconst selected = \"Top 2\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    // call it again if items count changes\n    this.menuItems = Menu(topList, selected);\n    this.beatMenuItems = SwiperContainer(beatList, selectedBeat);\n    this.topMenuItems = SwiperContainer(topList, selectedTop);\n  }\n \n  state = {\n    selectedBeat,\n    selectedTop,\n    selected,\n    alignCenter: true,\n    clickWhenDrag: false,\n    dragging: true,\n    hideArrows: true,\n    hideSingleArrow: true,\n    itemsCount: beatList.length,\n    scrollToSelected: false,\n    translate: 0,\n    transition: 0.3,\n    wheel: true\n  };\n \n  onSelect = key => {\n    this.setState({selected: key });\n  }\n  \n  render() {\n    const { selected } = this.state;\n    // Create menu from items\n    const beatMenuItems = this.beatMenuItems;\n    const topMenuItems = this.topMenuItems;\n    const menu = this.menuItems;\n\n    return (\n      <div className=\"playlist-container\">\n        <h1>Anibal.Kitchen</h1>\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        \n        <i>{icon}</i>\n        <h3>Browse Beats</h3>\n        <ScrollMenu\n          data={beatMenuItems}\n          selected={selected}\n          onSelect={this.onSelect}\n        />\n\n        <i>{icon}</i>\n        <h3>Weekly Top Featured</h3>\n        <ScrollMenu\n          data={menu}\n          selected={selected}\n          onSelect={this.onSelect}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}